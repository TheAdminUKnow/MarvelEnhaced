local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()
local w = library:CreateWindow("TVL Keys BY Nut ")

local tab1 = w:CreateFolder("Witches Keybinds")
local tab2 = w:CreateFolder("Custom Spells")
local tab3 = w:CreateFolder("Lovely Boosters")

local LocalPlayer = game:GetService("Players").LocalPlayer;
local debounce = false;
local ragdoll_debounce = false;
local ragdoll_debounce_1 = 0;

_G.AdminNotifier = true;

tab1:Bind("Motus",Enum.KeyCode.Q,function()

local ohTable1 = {
	["Incant"] = "motus"
}

game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(ohTable1)
end)

tab1:Bind("Twist Limbs",Enum.KeyCode.T,function()
local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "t" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "errox femus",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)


tab1:Bind("Ossox",Enum.KeyCode.U,function()
    
local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "u" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "ossox",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)


tab1:Bind("Ictus",Enum.KeyCode.K,function()

local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "k" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "ictus",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)



tab1:Bind("Incendia",Enum.KeyCode.G,function()
    
local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "g" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "incendia",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)

tab1:Bind("Ad Somnum",Enum.KeyCode.J,function()
    
local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "j" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "ad somnum",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)

tab1:Bind("Silencio",Enum.KeyCode.L,function()
    
local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "l" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "silencio",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
    end
    end
    end)

end)

tab2:Button("Phasmatos revertas victus", function()
    
        local args = {
    [1] = "Phasmatos reverta victus",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

local args = {
    [1] = game:GetService("Players").LocalPlayer.Character,
    [2] = "Phasmatos revertas victus"
}

game:GetService("ReplicatedStorage").Events.NameSummon:FireServer(unpack(args))

local args = {
    [1] = {
        [1] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui.dialogueScript,
        [2] = "purchaseResurrection",
        [3] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui
    }
}

game:GetService("ReplicatedStorage").Events.guiSpecialEvent:FireServer(unpack(args))

    
end)


tab2:Button("Phasmatos morsus immortalis", function()
    
    local args = {
    [1] = "Phasmatos morsus immortalis",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
    
    local ohTable1 = {
	[1] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui.dialogueScript,
	[2] = "receiveHouseReward",
	[3] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui
}

game:GetService("ReplicatedStorage").Events.guiSpecialEvent:FireServer(ohTable1)

    local ohTable1 = {
	[1] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui.dialogueScript,
	[2] = "receiveHouseReward",
	[3] = game:GetService("Players").LocalPlayer.PlayerGui.dialogueGui
}

game:GetService("ReplicatedStorage").Events.guiSpecialEvent:FireServer(ohTable1)



end)


tab2:Button("Phasmatos Somnus", function()
    

local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                return x
            end
        end
        return false
    end
    
    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
     if key == "y" then
    local player = getPlayer()
     if player then
    local args = {
        [1] = {
            ["Incant"] = "ad somnum",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
     local args = {
        [1] = {
            ["Incant"] = "immobilus",
            ["Target"] = player.Character
        }
    }
    game:GetService("ReplicatedStorage").RemoteEvents.WitchSpell:FireServer(unpack(args))
     
    
  local args = {
    [1] = "Phasmatos Somnus!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    end
    end
    end)
 game.StarterGui:SetCore("SendNotification", { 
    Title = "Press Y on Target";
    Text = "Spam";
    Icon = "rbxthumb://type=Asset&id=7770638479&w=150&h=150";
    Duration = "30";
    Button1 = "Enjoy :)";
})
    
end)


tab3:Button("Vogue#9999", function()
    
end)

tab3:Button("Josh.#6999", function()
    
end)

tab3:Button(";kenny#6666", function()
    
end)


tab3:Button("dominic#4455", function()
    
end)


tab3:Button("Astelia#6000", function()
    
end)


tab3:Button("Cruella#6666", function()
    
end)



tab3:Button("PhobesSlut#4440", function()
    
end)


 
  
        
    pcall(function()
        if _G.AdminNotifier then
            if game:GetService("Players"):FindFirstChild("Avery_lyfe") or game:GetService("Players"):FindFirstChild("snowbeaxr") or game:GetService("Players"):FindFirstChild("Zureilia") or game:GetService("Players"):FindFirstChild("DeceptiveInsidious") or game:GetService("LadyDavina"):FindFirstChild("xuefei123") or game:GetService("Players"):FindFirstChild("DataSigh") or game:GetService("Players"):FindFirstChild("GospodinDeveloper") or game:GetService("Players"):FindFirstChild("M0onhead") or game:GetService("Players"):FindFirstChild("NickInsidious") or game:GetService("Players"):FindFirstChild("VampireLegacyUpload") then
                LocalPlayer:Kick("Admin joined! Join on other server. ")
            end
        end
    end)


